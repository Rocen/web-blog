import{_ as r,c as o,o as a,ae as l}from"./chunks/framework.Bl5GZLa3.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/webpack性能优化.md","filePath":"engineering/webpack性能优化.md"}'),t={name:"engineering/webpack性能优化.md"};function n(i,e,s,d,c,g){return a(),o("div",null,e[0]||(e[0]=[l('<p>Webpack 性能优化手段主要包括以下几个方面：</p><h3 id="_1-代码分割" tabindex="-1">1. <strong>代码分割</strong> <a class="header-anchor" href="#_1-代码分割" aria-label="Permalink to &quot;1. **代码分割**&quot;">​</a></h3><ul><li><strong>入口起点</strong>：配置多个入口文件，拆分代码。</li><li><strong>动态导入</strong>：使用 <code>import()</code> 语法实现按需加载。</li><li><strong>SplitChunksPlugin</strong>：提取公共代码，避免重复打包。</li></ul><h3 id="_2-tree-shaking" tabindex="-1">2. <strong>Tree Shaking</strong> <a class="header-anchor" href="#_2-tree-shaking" aria-label="Permalink to &quot;2. **Tree Shaking**&quot;">​</a></h3><ul><li>通过 <code>import</code> 和 <code>export</code> 语法移除未使用的代码，需在 <code>package.json</code> 中设置 <code>&quot;sideEffects&quot;: false</code>。</li></ul><h3 id="_3-缓存" tabindex="-1">3. <strong>缓存</strong> <a class="header-anchor" href="#_3-缓存" aria-label="Permalink to &quot;3. **缓存**&quot;">​</a></h3><ul><li><strong>babel-loader 缓存</strong>：启用 <code>cacheDirectory</code> 选项缓存 Babel 编译结果。</li><li><strong>HardSourceWebpackPlugin</strong>：缓存模块，提升二次构建速度。</li></ul><h3 id="_4-多线程-多进程构建" tabindex="-1">4. <strong>多线程/多进程构建</strong> <a class="header-anchor" href="#_4-多线程-多进程构建" aria-label="Permalink to &quot;4. **多线程/多进程构建**&quot;">​</a></h3><ul><li><strong>thread-loader</strong>：将耗时的 loader 放在多线程中运行。</li><li><strong>HappyPack</strong>：<s>多线程处理 loader（已不推荐）</s>。`</li><li><strong>TerserWebpackPlugin 多进程</strong>：启用 <code>parallel</code> 选项并行压缩代码。</li></ul><h3 id="_5-优化-loader-配置" tabindex="-1">5. <strong>优化 Loader 配置</strong> <a class="header-anchor" href="#_5-优化-loader-配置" aria-label="Permalink to &quot;5. **优化 Loader 配置**&quot;">​</a></h3><ul><li><strong>缩小文件匹配范围</strong>：通过 <code>include</code> 和 <code>exclude</code> 减少 loader 处理的文件数量。</li><li><strong>缓存 loader 结果</strong>：如 <code>babel-loader</code> 的 <code>cacheDirectory</code>。</li></ul><h3 id="_6-优化插件" tabindex="-1">6. <strong>优化插件</strong> <a class="header-anchor" href="#_6-优化插件" aria-label="Permalink to &quot;6. **优化插件**&quot;">​</a></h3><ul><li><strong>TerserWebpackPlugin</strong>：压缩 JavaScript 代码。</li><li><strong>OptimizeCSSAssetsPlugin</strong>：压缩 CSS 代码。</li><li><strong>PurgeCSSPlugin</strong>：移除未使用的 CSS。</li></ul><h3 id="_7-dllplugin" tabindex="-1">7. <strong>DLLPlugin</strong> <a class="header-anchor" href="#_7-dllplugin" aria-label="Permalink to &quot;7. **DLLPlugin**&quot;">​</a></h3><ul><li>将不常变动的库提前打包，减少重复构建。</li></ul><h3 id="_8-模块解析优化" tabindex="-1">8. <strong>模块解析优化</strong> <a class="header-anchor" href="#_8-模块解析优化" aria-label="Permalink to &quot;8. **模块解析优化**&quot;">​</a></h3><ul><li><strong>resolve.alias</strong>：配置别名，减少模块解析时间。</li><li><strong>resolve.extensions</strong>：减少文件扩展名匹配次数。</li></ul><h3 id="_9-devserver-优化" tabindex="-1">9. <strong>DevServer 优化</strong> <a class="header-anchor" href="#_9-devserver-优化" aria-label="Permalink to &quot;9. **DevServer 优化**&quot;">​</a></h3><ul><li><strong>热更新</strong>：启用 <code>hot: true</code> 提升开发效率。</li><li><strong>lazy 模式</strong>：按需编译，减少初始构建时间。</li></ul><h3 id="_10-生产环境优化" tabindex="-1">10. <strong>生产环境优化</strong> <a class="header-anchor" href="#_10-生产环境优化" aria-label="Permalink to &quot;10. **生产环境优化**&quot;">​</a></h3><ul><li><strong>启用生产模式</strong>：设置 <code>mode: &#39;production&#39;</code>，自动启用优化。</li><li><strong>Source Map</strong>：选择合适的 source map 类型，避免影响性能。</li></ul><h3 id="_11-分析工具" tabindex="-1">11. <strong>分析工具</strong> <a class="header-anchor" href="#_11-分析工具" aria-label="Permalink to &quot;11. **分析工具**&quot;">​</a></h3><ul><li><strong>webpack-bundle-analyzer</strong>：分析打包文件，找出优化点。</li><li><strong>speed-measure-webpack-plugin</strong>：测量各插件和 loader 的耗时。</li></ul><h3 id="_12-其他优化" tabindex="-1">12. <strong>其他优化</strong> <a class="header-anchor" href="#_12-其他优化" aria-label="Permalink to &quot;12. **其他优化**&quot;">​</a></h3><ul><li><strong>压缩图片</strong>：使用 <code>image-webpack-loader</code> 压缩图片。</li><li><strong>使用 CDN</strong>：通过 <code>output.publicPath</code> 将静态资源上传到 CDN。</li></ul><p>通过这些手段，可以有效提升 Webpack 的构建性能和输出质量。</p>',26)]))}const _=r(t,[["render",n]]);export{h as __pageData,_ as default};
