import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.Bl5GZLa3.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/Compiler和Compilation.md","filePath":"engineering/Compiler和Compilation.md"}'),l={name:"engineering/Compiler和Compilation.md"};function p(e,s,h,k,o,r){return n(),a("div",null,s[0]||(s[0]=[t(`<p>在 Webpack 中，<strong>Compiler</strong> 和 <strong>Compilation</strong> 是构建流程的两个核心对象，它们分别承担不同的职责，协同完成模块打包工作。以下是它们的核心作用和区别：</p><hr><h3 id="_1-compiler-编译器" tabindex="-1"><strong>1. Compiler（编译器）</strong> <a class="header-anchor" href="#_1-compiler-编译器" aria-label="Permalink to &quot;**1. Compiler（编译器）**&quot;">​</a></h3><ul><li><p><strong>作用</strong></p><ul><li><strong>全局构建控制器</strong>：贯穿整个 Webpack 的生命周期，负责启动、配置和协调构建流程。</li><li><strong>环境初始化</strong>：加载 Webpack 配置（<code>webpack.config.js</code>）、初始化插件、创建 <code>Compilation</code> 实例。</li><li><strong>事件调度</strong>：触发全局钩子（如 <code>beforeRun</code>、<code>run</code>、<code>done</code>），供插件监听和干预构建过程。</li></ul></li><li><p><strong>生命周期</strong></p><ul><li><strong>单例对象</strong>：在 Webpack 启动时创建，整个构建过程中唯一存在。</li><li><strong>存活时间</strong>：从 Webpack 启动到结束（如开发模式下 <code>watch</code> 持续运行）。</li></ul></li><li><p><strong>典型场景</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 监听 Compiler 的 &quot;run&quot; 钩子（构建开始时触发）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compiler.hooks.run.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyPlugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Webpack 构建启动！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><hr><h3 id="_2-compilation-编译过程" tabindex="-1"><strong>2. Compilation（编译过程）</strong> <a class="header-anchor" href="#_2-compilation-编译过程" aria-label="Permalink to &quot;**2. Compilation（编译过程）**&quot;">​</a></h3><ul><li><p><strong>作用</strong></p><ul><li><strong>单次构建上下文</strong>：管理<strong>单次</strong>构建（如初始构建或文件变更后的增量构建）的所有数据。</li><li><strong>模块处理</strong>：解析模块依赖、转换代码（Loader）、生成模块依赖图（Module Graph）。</li><li><strong>资源生成</strong>：根据依赖图生成 Chunk、优化（Tree Shaking、Code Splitting）、输出最终文件。</li></ul></li><li><p><strong>生命周期</strong></p><ul><li><strong>临时对象</strong>：每次构建（包括 <code>watch</code> 模式下的每次文件变更）都会创建一个新的 <code>Compilation</code>。</li><li><strong>存活时间</strong>：从单次构建开始到结束（完成后销毁）。</li></ul></li><li><p><strong>典型场景</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compiler.hooks.compilation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyPlugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compilation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 监听 Compilation 的 &quot;optimizeChunks&quot; 钩子（优化 Chunk 时触发）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  compilation.hooks.optimizeChunks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyPlugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chunks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;正在优化 Chunk！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li></ul><hr><h3 id="_3-核心区别" tabindex="-1"><strong>3. 核心区别</strong> <a class="header-anchor" href="#_3-核心区别" aria-label="Permalink to &quot;**3. 核心区别**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>维度</strong></th><th><strong>Compiler</strong></th><th><strong>Compilation</strong></th></tr></thead><tbody><tr><td><strong>作用范围</strong></td><td>全局，控制整个 Webpack 进程</td><td>单次构建，处理具体模块和资源生成</td></tr><tr><td><strong>生命周期</strong></td><td>单例，存活于 Webpack 整个运行期间</td><td>临时对象，每次构建时创建并销毁</td></tr><tr><td><strong>数据内容</strong></td><td>包含配置、插件等全局信息</td><td>包含模块图、Chunk、本次构建的中间状态</td></tr><tr><td><strong>典型钩子</strong></td><td><code>beforeRun</code>, <code>run</code>, <code>done</code>, <code>watchRun</code></td><td><code>buildModule</code>, <code>finishModules</code>, <code>optimizeChunks</code></td></tr></tbody></table><hr><h3 id="_4-协作关系" tabindex="-1"><strong>4. 协作关系</strong> <a class="header-anchor" href="#_4-协作关系" aria-label="Permalink to &quot;**4. 协作关系**&quot;">​</a></h3><ol><li><p><strong>启动阶段</strong><br> Webpack 根据配置创建 <code>Compiler</code>，应用所有插件的 <code>apply</code> 方法，注册全局钩子。</p></li><li><p><strong>构建触发</strong><br> 当执行构建（如 <code>compiler.run()</code>），<code>Compiler</code> 触发 <code>run</code> 钩子，随后创建 <code>Compilation</code> 实例。</p></li><li><p><strong>模块处理</strong><br><code>Compilation</code> 开始解析入口文件、递归构建模块依赖图，调用 Loader 转换代码。</p></li><li><p><strong>优化与输出</strong><br><code>Compilation</code> 完成优化后，将结果传递给 <code>Compiler</code>，由 <code>Compiler</code> 的 <code>emit</code> 钩子触发文件写入。</p></li></ol><hr><h3 id="_5-插件开发中的应用" tabindex="-1"><strong>5. 插件开发中的应用</strong> <a class="header-anchor" href="#_5-插件开发中的应用" aria-label="Permalink to &quot;**5. 插件开发中的应用**&quot;">​</a></h3><ul><li><strong>修改全局配置</strong>：通过 <code>Compiler</code> 的钩子（如 <code>environment</code>）修改 Webpack 运行环境。</li><li><strong>干预单次构建</strong>：通过 <code>Compilation</code> 的钩子（如 <code>optimizeChunks</code>）调整 Chunk 生成策略。</li><li><strong>示例：统计构建耗时</strong><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BuildTimePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startTime;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compiler.hooks.run.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;BuildTimePlugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      startTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compiler.hooks.done.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;BuildTimePlugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`构建耗时：\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Date</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startTime</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}ms\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><hr><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><ul><li><strong>Compiler</strong> 是 Webpack 的“大脑”，管理全局流程和配置。</li><li><strong>Compilation</strong> 是单次构建的“执行者”，处理模块转换和资源生成。</li><li>理解二者的区别，能帮助你更精准地编写插件，或在调试时定位问题（如区分全局配置错误和单次构建逻辑错误）。</li></ul>`,19)]))}const g=i(l,[["render",p]]);export{E as __pageData,g as default};
