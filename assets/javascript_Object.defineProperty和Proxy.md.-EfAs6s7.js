import{_ as i,c as a,o as t,ae as n}from"./chunks/framework.Bl5GZLa3.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/Object.defineProperty和Proxy.md","filePath":"javascript/Object.defineProperty和Proxy.md"}'),h={name:"javascript/Object.defineProperty和Proxy.md"};function e(l,s,p,r,k,d){return t(),a("div",null,s[0]||(s[0]=[n(`<p>JavaScript中的<code>Object.defineProperty</code>和<code>Proxy</code>都用于对象属性的拦截和操作，但它们在功能、应用场景和实现方式上有显著差异。以下是两者的主要区别：</p><hr><h3 id="_1-核心功能" tabindex="-1"><strong>1. 核心功能</strong> <a class="header-anchor" href="#_1-核心功能" aria-label="Permalink to &quot;**1. 核心功能**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>特性</strong></th><th><strong>Object.defineProperty</strong></th><th><strong>Proxy</strong></th></tr></thead><tbody><tr><td><strong>拦截目标</strong></td><td><strong>单个属性</strong>的读写操作</td><td><strong>整个对象</strong>的多种操作（如属性增删、<code>in</code>操作符、函数调用等）</td></tr><tr><td><strong>拦截操作</strong></td><td>仅支持 <code>get</code> 和 <code>set</code></td><td>支持 13 种拦截操作（如 <code>get</code>, <code>set</code>, <code>has</code>, <code>deleteProperty</code>, <code>apply</code> 等）</td></tr><tr><td><strong>新增属性监听</strong></td><td>需手动为新增属性重新定义拦截</td><td>自动拦截新增属性的操作</td></tr><tr><td><strong>兼容性</strong></td><td>ES5+，广泛支持</td><td>ES6+，部分旧浏览器不支持（如 IE11）</td></tr></tbody></table><hr><h3 id="_2-使用方式" tabindex="-1"><strong>2. 使用方式</strong> <a class="header-anchor" href="#_2-使用方式" aria-label="Permalink to &quot;**2. 使用方式**&quot;">​</a></h3><h4 id="object-defineproperty" tabindex="-1"><strong>Object.defineProperty</strong> <a class="header-anchor" href="#object-defineproperty" aria-label="Permalink to &quot;**Object.defineProperty**&quot;">​</a></h4><ul><li><strong>直接修改原对象</strong>：通过定义属性的 <code>getter</code>/<code>setter</code> 实现拦截。</li><li><strong>需遍历属性</strong>：若需监听对象的所有属性，需递归遍历并为每个属性单独设置。</li><li><strong>示例</strong>：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._name; },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value; },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li></ul><h4 id="proxy" tabindex="-1"><strong>Proxy</strong> <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;**Proxy**&quot;">​</a></h4><ul><li><strong>创建代理对象</strong>：通过包装原对象实现拦截，操作需通过代理对象生效。</li><li><strong>无需预定义属性</strong>：自动拦截动态新增的属性和方法。</li><li><strong>示例</strong>：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target[prop] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { target[prop] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, handler);</span></span></code></pre></div></li></ul><hr><h3 id="_3-典型应用场景" tabindex="-1"><strong>3. 典型应用场景</strong> <a class="header-anchor" href="#_3-典型应用场景" aria-label="Permalink to &quot;**3. 典型应用场景**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>场景</strong></th><th><strong>Object.defineProperty</strong></th><th><strong>Proxy</strong></th></tr></thead><tbody><tr><td><strong>数据响应式</strong></td><td>Vue 2.x 的响应式实现（需递归遍历对象）</td><td>Vue 3.x 的响应式实现（自动监听动态属性）</td></tr><tr><td><strong>属性保护</strong></td><td>限制某些属性的读写权限</td><td>拦截更复杂的操作（如删除属性、<code>in</code>检测）</td></tr><tr><td><strong>API 封装</strong></td><td>简单属性劫持</td><td>实现高级功能（如数据验证、日志记录、缓存机制）</td></tr></tbody></table><hr><h3 id="_4-性能与限制" tabindex="-1"><strong>4. 性能与限制</strong> <a class="header-anchor" href="#_4-性能与限制" aria-label="Permalink to &quot;**4. 性能与限制**&quot;">​</a></h3><ul><li><p><strong>性能</strong></p><ul><li><code>Proxy</code> 的拦截操作更灵活，但可能因拦截逻辑复杂而影响性能。</li><li><code>Object.defineProperty</code> 针对单个属性操作，性能开销较低，但需手动处理动态属性。</li></ul></li><li><p><strong>限制</strong></p><ul><li><code>Object.defineProperty</code> 无法拦截数组索引修改或 <code>push</code> 等方法。</li><li><code>Proxy</code> 需通过代理对象操作才能触发拦截，直接操作原对象无效。</li></ul></li></ul><hr><h3 id="_5-示例对比" tabindex="-1"><strong>5. 示例对比</strong> <a class="header-anchor" href="#_5-示例对比" aria-label="Permalink to &quot;**5. 示例对比**&quot;">​</a></h3><h4 id="监听动态新增属性" tabindex="-1"><strong>监听动态新增属性</strong> <a class="header-anchor" href="#监听动态新增属性" aria-label="Permalink to &quot;**监听动态新增属性**&quot;">​</a></h4><ul><li><p><strong>Object.defineProperty</strong>：需手动监听。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alice&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 需预先定义或后续手动添加对新属性的拦截</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj[key];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, key, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value; },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newVal; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 手动监听新增属性</span></span></code></pre></div></li><li><p><strong>Proxy</strong>：自动监听。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alice&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target[prop]; },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { target[prop] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">proxy.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动触发 set 拦截</span></span></code></pre></div></li></ul><hr><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>维度</strong></th><th><strong>Object.defineProperty</strong></th><th><strong>Proxy</strong></th></tr></thead><tbody><tr><td><strong>功能范围</strong></td><td>单一属性读写拦截</td><td>全对象多操作拦截</td></tr><tr><td><strong>动态属性处理</strong></td><td>需手动处理</td><td>自动拦截</td></tr><tr><td><strong>兼容性</strong></td><td>更广泛</td><td>依赖 ES6+ 环境</td></tr><tr><td><strong>适用场景</strong></td><td>简单属性控制、兼容旧项目</td><td>复杂拦截需求、现代框架的响应式系统</td></tr></tbody></table><p>选择依据：</p><ul><li><strong>需要兼容性</strong>或简单属性控制 → <code>Object.defineProperty</code></li><li><strong>需要全面拦截</strong>或处理动态属性 → <code>Proxy</code></li></ul>`,25)]))}const E=i(h,[["render",e]]);export{g as __pageData,E as default};
