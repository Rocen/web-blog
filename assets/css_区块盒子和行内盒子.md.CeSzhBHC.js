import{_ as o,c as s,o as e,ae as i}from"./chunks/framework.Bl5GZLa3.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"css/区块盒子和行内盒子.md","filePath":"css/区块盒子和行内盒子.md"}'),l={name:"css/区块盒子和行内盒子.md"};function d(a,t,n,r,c,g){return e(),s("div",null,t[0]||(t[0]=[i(`<p>CSS 中的 <strong>区块盒子（Block Box）</strong> 和 <strong>行内盒子（Inline Box）</strong> 是两种主要的布局模型，它们的核心区别在于 <strong>布局行为</strong> 和 <strong>盒模型属性</strong>。</p><hr><h3 id="_1-核心区别" tabindex="-1"><strong>1. 核心区别</strong> <a class="header-anchor" href="#_1-核心区别" aria-label="Permalink to &quot;**1. 核心区别**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>特性</strong></th><th><strong>区块盒子（Block Box）</strong></th><th><strong>行内盒子（Inline Box）</strong></th></tr></thead><tbody><tr><td><strong>布局行为</strong></td><td>独占父容器的一整行，垂直堆叠。</td><td>与其他行内元素共享同一行，水平排列。</td></tr><tr><td><strong>尺寸属性</strong></td><td>可以设置 <code>width</code> 和 <code>height</code>。</td><td>设置 <code>width</code> 和 <code>height</code> <strong>无效</strong>，尺寸由内容决定。</td></tr><tr><td><strong>边距（Margin）</strong></td><td>上下左右边距均生效。</td><td><strong>左右边距生效</strong>，上下边距可能不生效（不影响行高）。</td></tr><tr><td><strong>内边距（Padding）</strong></td><td>上下左右内边距均生效。</td><td>左右内边距生效，上下内边距可能撑开内容但不影响行高。</td></tr><tr><td><strong>默认换行</strong></td><td>强制换行（前后自动插入换行）。</td><td>不换行，除非内容超出容器宽度。</td></tr><tr><td><strong>典型标签</strong></td><td><code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;h1&gt;~&lt;h6&gt;</code></td><td><code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;strong&gt;</code></td></tr></tbody></table><hr><h3 id="_2-常见标签分类" tabindex="-1"><strong>2. 常见标签分类</strong> <a class="header-anchor" href="#_2-常见标签分类" aria-label="Permalink to &quot;**2. 常见标签分类**&quot;">​</a></h3><h4 id="区块盒子-block-box" tabindex="-1"><strong>区块盒子（Block Box）</strong> <a class="header-anchor" href="#区块盒子-block-box" aria-label="Permalink to &quot;**区块盒子（Block Box）**&quot;">​</a></h4><p>默认 <code>display: block;</code> 的标签：</p><ul><li><code>&lt;div&gt;</code></li><li><code>&lt;p&gt;</code></li><li><code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code></li><li><code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;li&gt;</code></li><li><code>&lt;section&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code></li><li><code>&lt;table&gt;</code></li><li><code>&lt;form&gt;</code></li></ul><h4 id="行内盒子-inline-box" tabindex="-1"><strong>行内盒子（Inline Box）</strong> <a class="header-anchor" href="#行内盒子-inline-box" aria-label="Permalink to &quot;**行内盒子（Inline Box）**&quot;">​</a></h4><p>默认 <code>display: inline;</code> 的标签：</p><ul><li><code>&lt;span&gt;</code></li><li><code>&lt;a&gt;</code></li><li><code>&lt;strong&gt;</code>, <code>&lt;em&gt;</code></li><li><code>&lt;img&gt;</code>（虽然可设置宽高，但默认是行内替换元素）</li><li><code>&lt;input&gt;</code>, <code>&lt;button&gt;</code></li><li><code>&lt;label&gt;</code></li></ul><hr><h3 id="_3-例外与特殊情况" tabindex="-1"><strong>3. 例外与特殊情况</strong> <a class="header-anchor" href="#_3-例外与特殊情况" aria-label="Permalink to &quot;**3. 例外与特殊情况**&quot;">​</a></h3><ul><li><strong>替换元素</strong>（如 <code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>）：<br> 虽然默认是 <code>inline</code>，但可以设置 <code>width</code> 和 <code>height</code>（称为 <strong>行内替换元素</strong>）。</li><li><strong><code>display: inline-block</code></strong>：<br> 混合特性，允许水平排列（类似行内）但支持设置宽高（类似区块），如 <code>&lt;button&gt;</code>。</li><li><strong>HTML5 新语义标签</strong>：<br> 如 <code>&lt;section&gt;</code>、<code>&lt;nav&gt;</code> 默认是 <code>block</code>。</li></ul><hr><h3 id="_4-通过-css-修改显示类型" tabindex="-1"><strong>4. 通过 CSS 修改显示类型</strong> <a class="header-anchor" href="#_4-通过-css-修改显示类型" aria-label="Permalink to &quot;**4. 通过 CSS 修改显示类型**&quot;">​</a></h3><p>可以通过 <code>display</code> 属性强制改变元素的默认行为：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 将行内元素转为区块盒子 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 将区块元素转为行内盒子 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><ul><li><strong>区块盒子</strong>适合构建页面的大结构（如容器、段落、标题）。</li><li><strong>行内盒子</strong>适合修饰文本内容（如链接、加粗、图标）。</li><li>始终优先选择语义化标签，再用 CSS 调整布局。</li></ul>`,22)]))}const k=o(l,[["render",d]]);export{p as __pageData,k as default};
